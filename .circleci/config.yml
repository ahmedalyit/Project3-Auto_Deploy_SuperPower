version: 2.1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Update frontend dependencies 
          command: |
            cd frontend
            npm install
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm run build  
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Update backend dependencies 
          command: |
            cd backend
            npm install
      - run:
          name: Back-end build
          command: |
            cd backend
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test frontend
          command: |
            cd frontend
            rm -rf node_modules/
            npm install
            npm run build
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test backend
          command: |
            cd frontend
            rm -rf node_modules/
            npm install
            npm run build

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm update
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test backend
          command: |
            cd frontend
            npm update
           
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure backend infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=Udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=Udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt 

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["8f:73:3d:76:19:14:8c:e2:ad:21:bf:5e:3b:14:35:84"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Install AWS-CLI
          command: |
            pip install awscli
      - run:
          name: Install OpenSSH
          command: |
            apk add openssh-client
      - run:
          name: Configure server
          command: |
      - run:
          name: Configure server
          no_output_timeout: 20m
          command: |
            pwd
            cd .circleci/ansible/
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
          environment:
            ANSIBLE_HOST_KEY_CHECKING: false
      # Here's where you will add some code to rollback on failure 

  run-migrations:

    docker:
      - image: circleci/node:12.18.4
    steps:
      - checkout

      - restore_cache:
          keys: [backend-build]

      - attach_workspace:
          at: ~/project/

      - run:
          name: awscli install
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli

            ls -la ~/project/backend
            cat ~/project/backend/.env

#      - run:
#          name: add values to .env files
#          command: |
#            cd /home/circleci/project/backend
#            pwd

            #touch /home/circleci/project/backend/.env
            #echo ENVIRONMENT=production >> "/home/circleci/project/backend/.env"
            #echo TYPEORM_CONNECTION=postgres >> "/home/circleci/project/backend/.env"
            #echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "/home/circleci/project/backend/.env"
            #echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "/home/circleci/project/backend/.env"
            #echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "/home/circleci/project/backend/.env"
            #echo TYPEORM_HOST=$TYPEORM_HOST >> "/home/circleci/project/backend/.env"
            #echo TYPEORM_PORT=$TYPEORM_PORT >> "/home/circleci/project/backend/.env"
            #echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "/home/circleci/project/backend/.env"
            #echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "/home/circleci/project/backend/.env"
            #echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "/home/circleci/project/backend/.env"
            #echo NODE_ENV=development >> "/home/circleci/project/backend/.env"

      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build

            echo 'DUMP MIGRATIONS'
            echo "PWD: " $(pwd)
            npm run migrations >> ~/project/backend/migrations_dump.txt

            echo 'DISPLAY CONTENTS'
            echo '*****************'
            cat migrations_dump.txt
            echo '-----------------'
            #ls -la
            #echo "running migrations!!!!!!"
            #npm run migrations
            #cat  /home/circleci/project/backend/migrations_dump.txt

      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            pwd
            sudo cat ~/project/backend/migrations_dump.txt

            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "token: ce-${CIRCLE_WORKFLOW_ID}" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
              echo migration_${CIRCLE_WORKFLOW_ID}
              echo "SUCCESS = 1"
            else
              echo $(curl -H "Content-Type: text/plain" -H "token: ce-${CIRCLE_WORKFLOW_ID}" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID} | grep "No migrations")
              echo "migration ID" migration_${CIRCLE_WORKFLOW_ID}
              echo "FAIL = 0"
            fi

deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.7-alpine3.11
    steps:
      - checkout

      - attach_workspace:
          at: ~/project/

      - run:
          name: Install extra apps
          command: |
            cd ~/project/frontend
            apk add --no-cache nodejs
            apk add --no-cache npm
            apk add --no-cache bash
            apk add --no-cache curl
            pip install awscli

      - run:
          name: Get backend url
          command: |
            echo "PWD " $(pwd)
            ls -la ~/project

            cd ~/project/frontend
            BACKENDIP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)

            BACKENDDNS=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicDnsName' --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)

            touch .env
            export API_URL="http://${BACKENDIP}:3030"
            export API_DNS="http://${BACKENDDNS}:3030"
            echo "${API_URL}" >> .env
            #echo "BACKENDURL: ${API_URL}"
            #echo $BACKENDDNS
            echo ".env"
            cat ~/project/frontend/.env
            #echo ${API_URL}

            npm install webpack-dev-server -g
            npm i
            npm run build
            npm audit fix --audit-level=critical --force
            cat ~/project/frontend/.env

            aws s3 cp ~/project/frontend/dist s3://udapeople-"${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      # Here's where you will add some code to rollback on failure
      - #destroy-environment
      - #revert-migrations

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
